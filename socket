套接字工作过程如下:服务器首先启动,通过调用socket()建立一个套接字,然后调用bind()将该套接字和本地网络地址联系在一起,
再调用listen()使套接字做好侦听的准备,并规定它的请求队列的长度,之后就调用accept()来接收连接。客户在建立套接字后就可调用connect()和服务器建立连接。
连接一旦建立,客户机和服务器之间就可以通过调用read()和write()来发送和接收数据。最后,待数据传送结束后,双方调用close()关闭套接字。

struct sockaddr是通用的套接字地址，而struct sockaddr_in则是internet环境下套接字的地址形式，二者长度一样，都是16个字节。
二者是并列结构，指向sockaddr_in结构的指针也可以指向sockaddr。一般情况下，需要把sockaddr_in结构强制转换成sockaddr结构再传入系统调用函数中。
填值的时候使用sockaddr_in结构，而作为函数的 参数传入的时候转换成sockaddr结构。

Winsock2.h中
#define AF_INET 0
#define PF_INET AF_INET所以在windows中AF_INET与PF_INET完全一样
AF_INET是 IPv4 网络协议的套接字类型，AF_INET6 则是 IPv6 的，AF_UNIX则只能用于本机内进程之间的通信。
AF_INET需经过多个协议层的编解码，消耗系统cpu，并且数据传输需要经过网卡，受到网卡带宽的限制。
AF_UNIX数据到达内核缓冲区后，由内核根据指定路径名找到接收方socket对应的内核缓冲区，直接将数据拷贝过去，不经过协议层编解码，不经过网卡，不受网卡带宽的限制
AF_UNIX的传输速率远远大于AF_INET
AF_INET不仅可以用作本机的跨进程通信，同样的可以用于不同机器之间的通信，其就是为了在不同机器之间进行网络互联传递数据而生。
***************************************************************************************
struct sockaddr
  {
    unsigned short sa_family;    /* Common data: address family and length.协议族 AF_xxx */
    char sa_data[14];           /* Address data.  地址+端口号 用做bind、connect、recvfrom、sendto等函数的参数，指明地址信息*/
  };
  
sockaddr的缺陷：sa_data把目标地址和端口信息混在一起了。而sockaddr_in就解决了这一缺陷，将端口号和IP地址分开存储。
***************************************************************************************
struct sockaddr_in {
    short int sin_family;              /* Address family 协议族，在socket编程中只能是AF_INET */
    unsigned short int sin_port;       /* Port number 16位端口号*/
    struct in_addr sin_addr;           /* Internet address 32位IP地址 使用in_addr这个数据结构*/
    unsigned char sin_zero[8];         /* Same size as struct sockaddr 为了让sockaddr与sockaddr_in两个数据结构保持大小相同而保留的空字节*/
};
struct in_addr {
    unsigned long s_addr;  //32位IPV4地址
};
typedef struct in_addr {
    union {
        struct{
            unsigned char s_b1,s_b2,s_b3,s_b4;
        } S_un_b;
        struct {
            unsigned short s_w1,s_w2;
        } S_un_w;
        unsigned long S_addr;
    } S_un;
} IN_ADDR;

例：
struct sockaddr_in mysock;
mysock.sa_family=AF_INET;
mysock.sin_addr.s_addr=inet_addr("192.168.0.1");
***************************************************************************************
sockaddr_un
UNIX套接字,也称为本地套接字，这样做可以避免为黑客留下后门。
struct sockaddr_un结构有两个参数：sun_family、sun_path。sun_family只能是AF_LOCAL或AF_UNIX，而sun_path是本地文件的路径。
例：
struct sockaddr_un sun;
sun.sun_family = AF_LOCAL;
strcpy(sun.sun_path, filepath);
bind(sockfd, (struct sockaddr*)&sun, sizeof(sun));
***************************************************************************************

#include <WinSock2.h>
  WORD sockVersion = MAKEWORD(2, 2);  	
	WSADATA wsaData;   	
	if (WSAStartup(sockVersion, &wsaData) != 0) //加载套接字库,进行相应的socket库绑定  WSAStartup返回0表示设置初始化成功
		return 0; 

	//AF_INET表示IPv4，SOCK_STREAM数据传输方式，IPPROTO_TCP传输协议;
	SOCKET listenSocket = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
	if (listenSocket == INVALID_SOCKET)
	{
		printf("套接字创建失败");
		WSACleanup();
		return 0;
	}
